plugins {
	id "idea" // to download source- and javadoc jars
	id "java-library"
	id "application"
	id "io.freefair.lombok" version "latest.release"
	id("me.champeau.jmh") version "latest.release"
}

allprojects {
	repositories {
		mavenLocal()
		mavenCentral()
		maven {
			url = "https://plugins.gradle.org/m2/"
		}
		maven { url = "https://jitpack.io" }
	}
}

tasks.withType(JavaCompile).configureEach { // ? gradle.projectsEvaluated {
	options.encoding = 'UTF-8'
	options.compilerArgs.addAll(['-Xlint:all,-serial', '-parameters'])
	options.release.set(17)
	options.deprecation = true
}

sourceSets {
	jmh {
		java.srcDirs = ['src/jmh/java']
		resources.srcDirs = ['src/jmh/resources']
		compileClasspath += sourceSets.main.runtimeClasspath
	}
}

dependencies {
	implementation project(":")
	api('it.unimi.dsi:fastutil:latest.release')
	compileOnly('org.jctools:jctools-core:latest.release')
	compileOnly('org.jspecify:jspecify:latest.release')
	compileOnly('jakarta.validation:jakarta.validation-api:latest.release')

	jmh 'org.openjdk.jmh:jmh-core:latest.release'
	jmh 'org.openjdk.jmh:jmh-generator-annprocess:latest.release'
	jmhAnnotationProcessor 'org.openjdk.jmh:jmh-generator-annprocess:latest.release'
	annotationProcessor('org.openjdk.jmh:jmh-generator-annprocess:latest.release')

	implementation 'org.openjdk.jmh:jmh-core:latest.release'
	implementation 'org.openjdk.jmh:jmh-generator-annprocess:latest.release'

	// TEST
	testImplementation 'org.junit.jupiter:junit-jupiter-api:5.12.+'
	testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.12.+'
	//testRuntimeOnly 'org.junit.vintage:junit-vintage-engine:5.12.+'
	testImplementation('org.jctools:jctools-core:latest.release')
}

test {
	useJUnitPlatform()
}

// ./gradlew jmh
jmh {
	jvmArgs = ["-Xms3072m","-Xmx3072m"]
	duplicateClassesStrategy = DuplicatesStrategy.INCLUDE
}

lombok { version = "latest.release" }

tasks.withType(AbstractArchiveTask).configureEach {
	preserveFileTimestamps = false
	reproducibleFileOrder = true
}
println "[INFO] ${project.group}:${project.name}:$version  â‡’  ${tasks.jar.archiveFileName.get()} # JVM: ${System.getProperty("java.version")}  Gradle: ${gradle.gradleVersion}"