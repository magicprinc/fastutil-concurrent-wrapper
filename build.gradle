plugins {
	id "idea" // to download source- and javadoc jars
	id "java-library"
	id "io.freefair.lombok" version "latest.release"
	id "net.ltgt.errorprone" version "latest.release"
	id "com.vanniktech.maven.publish" version "latest.release"//? id 'maven-publish'
	id "org.gradlex.reproducible-builds" version "latest.release"// https://github.com/gradlex-org/reproducible-builds
}

allprojects {
	repositories {
		mavenLocal()
		mavenCentral()
		maven {
			url = "https://plugins.gradle.org/m2/"
		}
		maven { url = "https://jitpack.io" }
	}
}

tasks.withType(JavaCompile).configureEach { // ? gradle.projectsEvaluated {
	options.encoding = 'UTF-8'
	options.compilerArgs.addAll(['-Xlint:all,-serial', '-parameters'])
	options.release.set(17)
	options.deprecation = true

	options.errorprone {
		enabled = true
		disableWarningsInGeneratedCode = true
		excludedPaths = ".*/(generated|test).*/.*"
		disable("UnusedVariable")
		disable("MissingSummary")
		disable("StringConcatToTextBlock")
		errorproneArgs = ["-XepExcludedPaths:.*/test/.*"]
	}
}

mavenPublishing {
	pom {
		name = "fastutil-concurrent-wrapper"
		description = "Set of concurrent wrappers around fastutil primitive maps."
		url = "https://github.com/trivago/fastutil-concurrent-wrapper"
		licenses {
			license {
				name = "The Apache Software License, Version 2.0"
				url = "https://opensource.org/licenses/Apache-2.0"
				distribution = "repo"
			}
		}
		developers {
			developer {
				id = "mchernyakov"
				name = "Mikhail Chernyakov"
				url = "https://github.com/mchernyakov"
			}
			developer {
				id = "erdoganf"
				name = "Fehim Erdogan"
				url = "https://github.com/erdoganf"
			}
			developer {
				id = "sarveswaran-m"
				name = "Sarveswaran Meenakshisundaram"
				url = "https://github.com/sarveswaran-m"
			}
		}
		scm {
			url = "https://github.com/magicprinc/fastutil-concurrent-wrapper"
			connection = "scm:git:https://github.com/magicprinc/fastutil-concurrent-wrapper"
			developerConnection = "scm:git:https://github.com/magicprinc/fastutil-concurrent-wrapper"
		}
	}
}

dependencies {
	errorprone("com.google.errorprone:error_prone_core:latest.release")
	// jmhAnnotationProcessor "com.google.errorprone:error_prone_core:2.36.0"

	api('it.unimi.dsi:fastutil:latest.release')
	compileOnly('org.jctools:jctools-core:latest.release')
	compileOnly('org.jspecify:jspecify:latest.release')
	compileOnly('jakarta.validation:jakarta.validation-api:latest.release')

	// TEST
	testImplementation 'org.junit.jupiter:junit-jupiter-api:5.13.+'
	testImplementation 'org.junit.platform:junit-platform-launcher:1.13.+'
	testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.13.+'
	//testRuntimeOnly 'org.junit.vintage:junit-vintage-engine:5.13.+'
	testImplementation('org.jctools:jctools-core:latest.release')
}

test {
	useJUnitPlatform()
	enableAssertions = true
	maxHeapSize = "2G"
	workingDir project.projectDir // Set the working directory to the subproject directory, not current dir
	systemProperty("user.dir", project.projectDir) // to be sure ^
	println "[INFO] ${project.name}.workingDir == $workingDir"
}

testing {
	suites {
		test(JvmTestSuite) {
			useJUnitJupiter()
		}
	}
}

jar {
	archiveBaseName.set('fastutil-concurrent-wrapper')
}

java {
	withSourcesJar()
}

// ./gradlew publish --no-daemon --no-parallel
// ./gradlew closeAndReleaseRepository
publishing {// https://docs.gradle.org/current/userguide/publishing_maven.html
	repositories {
		maven {
			def releasesRepoUrl = "$buildDir/repos/releases"
			def snapshotsRepoUrl = "$buildDir/repos/snapshots"
			url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
		}
	}
//	publications {
//		maven(MavenPublication) {
//			from components.java
//			suppressPomMetadataWarningsFor('runtimeElements')
//		}
//	}
}

lombok { version = "latest.release" }

tasks.withType(AbstractArchiveTask).configureEach {
	preserveFileTimestamps = false
	reproducibleFileOrder = true
}
println "[INFO] ${project.group}:${project.name}:$version  â‡’  ${tasks.jar.archiveFileName.get()} # JVM: ${System.getProperty("java.version")}  Gradle: ${gradle.gradleVersion}"